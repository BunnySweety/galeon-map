name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Job 1: Lint and Type Check
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npm run type-check

      - name: Check code formatting
        run: npm run format:check

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test -- --run --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: coverage/

  # Job 3: E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_MAPBOX_TOKEN: ${{ secrets.NEXT_PUBLIC_MAPBOX_TOKEN }}

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NEXT_PUBLIC_MAPBOX_TOKEN: ${{ secrets.NEXT_PUBLIC_MAPBOX_TOKEN }}

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Job 4: Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit (production only)
        run: npm audit --production --audit-level=high
        continue-on-error: true

      - name: Run Snyk security test
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Job 5: Build Production
  build-production:
    name: Build Production
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests]
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_MAPBOX_TOKEN: ${{ secrets.NEXT_PUBLIC_MAPBOX_TOKEN }}
          NEXT_PUBLIC_APP_VERSION: ${{ github.sha }}

      - name: Check build output
        run: |
          if [ ! -d "out" ]; then
            echo "Build output directory 'out' not found"
            exit 1
          fi
          echo "Build size:"
          du -sh out

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: out/
          retention-days: 7

  # Job 6: Deploy Preview (for PRs)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [build-production, e2e-tests]
    if: github.event_name == 'pull_request'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: out/

      - name: Deploy to Cloudflare Pages (Preview)
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: galeon-community-map
          directory: out
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  # Job 7: Deploy Production (main branch only)
  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: [build-production, e2e-tests, security-audit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 10

    environment:
      name: production
      url: https://map.galeon.community

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: out/

      - name: Deploy to Cloudflare Pages (Production)
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: galeon-community-map
          directory: out
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          branch: main

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Deployment to production successful!"
          echo "URL: https://map.galeon.community"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment to production failed!"
          exit 1

  # Job 8: Performance Analysis
  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: [build-production]
    if: github.event_name == 'pull_request'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: out/

      - name: Analyze bundle size
        run: |
          echo "üì¶ Bundle Size Analysis:"
          find out -name "*.js" -type f -exec du -h {} \; | sort -rh | head -20

      - name: Check bundle size limits
        run: |
          MAX_SIZE_KB=300
          TOTAL_SIZE=$(find out -name "*.js" -type f -exec du -k {} \; | awk '{sum+=$1} END {print sum}')
          echo "Total JS bundle size: ${TOTAL_SIZE}KB"
          if [ $TOTAL_SIZE -gt $MAX_SIZE_KB ]; then
            echo "‚ö†Ô∏è Warning: Bundle size exceeds ${MAX_SIZE_KB}KB limit"
            exit 1
          fi

  # Job 9: Lighthouse CI
  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    needs: [deploy-preview]
    if: github.event_name == 'pull_request'
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://preview-${{ github.event.pull_request.number }}.galeon-community-map.pages.dev
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Job 10: Dependency Review (PRs only)
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

# Workflow Summary
  status-summary:
    name: Status Summary
    runs-on: ubuntu-latest
    needs:
      [
        lint-and-typecheck,
        unit-tests,
        e2e-tests,
        security-audit,
        build-production,
      ]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Check job statuses
        run: |
          echo "üîç CI/CD Pipeline Summary:"
          echo "Lint & Type Check: ${{ needs.lint-and-typecheck.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          echo "Build Production: ${{ needs.build-production.result }}"

      - name: Fail if any critical job failed
        if: |
          needs.lint-and-typecheck.result == 'failure' ||
          needs.unit-tests.result == 'failure' ||
          needs.e2e-tests.result == 'failure' ||
          needs.build-production.result == 'failure'
        run: |
          echo "‚ùå One or more critical jobs failed"
          exit 1

      - name: Success notification
        if: |
          needs.lint-and-typecheck.result == 'success' &&
          needs.unit-tests.result == 'success' &&
          needs.e2e-tests.result == 'success' &&
          needs.build-production.result == 'success'
        run: |
          echo "‚úÖ All critical jobs passed successfully!"
