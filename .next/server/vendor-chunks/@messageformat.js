"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@messageformat";
exports.ids = ["vendor-chunks/@messageformat"];
exports.modules = {

/***/ "(ssr)/./node_modules/@messageformat/parser/lib/lexer.js":
/*!*********************************************************!*\
  !*** ./node_modules/@messageformat/parser/lib/lexer.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.lexer = exports.states = void 0;\nconst moo_1 = __importDefault(__webpack_require__(/*! moo */ \"(ssr)/./node_modules/moo/moo.js\"));\nexports.states = {\n    body: {\n        doubleapos: { match: \"''\", value: () => \"'\" },\n        quoted: {\n            lineBreaks: true,\n            match: /'[{}#](?:[^']|'')*'(?!')/u,\n            value: src => src.slice(1, -1).replace(/''/g, \"'\")\n        },\n        argument: {\n            lineBreaks: true,\n            match: /\\{\\s*[^\\p{Pat_Syn}\\p{Pat_WS}]+\\s*/u,\n            push: 'arg',\n            value: src => src.substring(1).trim()\n        },\n        octothorpe: '#',\n        end: { match: '}', pop: 1 },\n        content: { lineBreaks: true, match: /[^][^{}#']*/u }\n    },\n    arg: {\n        select: {\n            lineBreaks: true,\n            match: /,\\s*(?:plural|select|selectordinal)\\s*,\\s*/u,\n            next: 'select',\n            value: src => src.split(',')[1].trim()\n        },\n        'func-args': {\n            lineBreaks: true,\n            match: /,\\s*[^\\p{Pat_Syn}\\p{Pat_WS}]+\\s*,/u,\n            next: 'body',\n            value: src => src.split(',')[1].trim()\n        },\n        'func-simple': {\n            lineBreaks: true,\n            match: /,\\s*[^\\p{Pat_Syn}\\p{Pat_WS}]+\\s*/u,\n            value: src => src.substring(1).trim()\n        },\n        end: { match: '}', pop: 1 }\n    },\n    select: {\n        offset: {\n            lineBreaks: true,\n            match: /\\s*offset\\s*:\\s*\\d+\\s*/u,\n            value: src => src.split(':')[1].trim()\n        },\n        case: {\n            lineBreaks: true,\n            match: /\\s*(?:=\\d+|[^\\p{Pat_Syn}\\p{Pat_WS}]+)\\s*\\{/u,\n            push: 'body',\n            value: src => src.substring(0, src.indexOf('{')).trim()\n        },\n        end: { match: /\\s*\\}/u, pop: 1 }\n    }\n};\nexports.lexer = moo_1.default.states(exports.states);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1lc3NhZ2Vmb3JtYXQvcGFyc2VyL2xpYi9sZXhlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsR0FBRyxjQUFjO0FBQzlCLDhCQUE4QixtQkFBTyxDQUFDLDRDQUFLO0FBQzNDLGNBQWM7QUFDZDtBQUNBLHNCQUFzQiwrQkFBK0I7QUFDckQ7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0Esc0JBQXNCLFFBQVEsUUFBUSxHQUFHLE9BQU87QUFDaEQ7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLGVBQWUsU0FBUyxXQUFXO0FBQ25DLG1CQUFtQixpQ0FBaUM7QUFDcEQsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsNkJBQTZCLFFBQVEsR0FBRyxPQUFPO0FBQy9DO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLDZCQUE2QixRQUFRLEdBQUcsT0FBTztBQUMvQztBQUNBLFNBQVM7QUFDVCxlQUFlLFNBQVM7QUFDeEIsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLG9DQUFvQyxRQUFRLEdBQUcsT0FBTyxRQUFRO0FBQzlEO0FBQ0EseURBQXlEO0FBQ3pELFNBQVM7QUFDVCxlQUFlLGFBQWE7QUFDNUI7QUFDQTtBQUNBLGFBQWEiLCJzb3VyY2VzIjpbIi9kYXRhL1Byb2plY3RzL0dhbGVvbiBwcm9qZWN0cy9nYWxlb24tY29tbXVuaXR5LWhvc3BpdGFsLW1hcC9tYWluL25vZGVfbW9kdWxlcy9AbWVzc2FnZWZvcm1hdC9wYXJzZXIvbGliL2xleGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5sZXhlciA9IGV4cG9ydHMuc3RhdGVzID0gdm9pZCAwO1xuY29uc3QgbW9vXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIm1vb1wiKSk7XG5leHBvcnRzLnN0YXRlcyA9IHtcbiAgICBib2R5OiB7XG4gICAgICAgIGRvdWJsZWFwb3M6IHsgbWF0Y2g6IFwiJydcIiwgdmFsdWU6ICgpID0+IFwiJ1wiIH0sXG4gICAgICAgIHF1b3RlZDoge1xuICAgICAgICAgICAgbGluZUJyZWFrczogdHJ1ZSxcbiAgICAgICAgICAgIG1hdGNoOiAvJ1t7fSNdKD86W14nXXwnJykqJyg/IScpL3UsXG4gICAgICAgICAgICB2YWx1ZTogc3JjID0+IHNyYy5zbGljZSgxLCAtMSkucmVwbGFjZSgvJycvZywgXCInXCIpXG4gICAgICAgIH0sXG4gICAgICAgIGFyZ3VtZW50OiB7XG4gICAgICAgICAgICBsaW5lQnJlYWtzOiB0cnVlLFxuICAgICAgICAgICAgbWF0Y2g6IC9cXHtcXHMqW15cXHB7UGF0X1N5bn1cXHB7UGF0X1dTfV0rXFxzKi91LFxuICAgICAgICAgICAgcHVzaDogJ2FyZycsXG4gICAgICAgICAgICB2YWx1ZTogc3JjID0+IHNyYy5zdWJzdHJpbmcoMSkudHJpbSgpXG4gICAgICAgIH0sXG4gICAgICAgIG9jdG90aG9ycGU6ICcjJyxcbiAgICAgICAgZW5kOiB7IG1hdGNoOiAnfScsIHBvcDogMSB9LFxuICAgICAgICBjb250ZW50OiB7IGxpbmVCcmVha3M6IHRydWUsIG1hdGNoOiAvW15dW157fSMnXSovdSB9XG4gICAgfSxcbiAgICBhcmc6IHtcbiAgICAgICAgc2VsZWN0OiB7XG4gICAgICAgICAgICBsaW5lQnJlYWtzOiB0cnVlLFxuICAgICAgICAgICAgbWF0Y2g6IC8sXFxzKig/OnBsdXJhbHxzZWxlY3R8c2VsZWN0b3JkaW5hbClcXHMqLFxccyovdSxcbiAgICAgICAgICAgIG5leHQ6ICdzZWxlY3QnLFxuICAgICAgICAgICAgdmFsdWU6IHNyYyA9PiBzcmMuc3BsaXQoJywnKVsxXS50cmltKClcbiAgICAgICAgfSxcbiAgICAgICAgJ2Z1bmMtYXJncyc6IHtcbiAgICAgICAgICAgIGxpbmVCcmVha3M6IHRydWUsXG4gICAgICAgICAgICBtYXRjaDogLyxcXHMqW15cXHB7UGF0X1N5bn1cXHB7UGF0X1dTfV0rXFxzKiwvdSxcbiAgICAgICAgICAgIG5leHQ6ICdib2R5JyxcbiAgICAgICAgICAgIHZhbHVlOiBzcmMgPT4gc3JjLnNwbGl0KCcsJylbMV0udHJpbSgpXG4gICAgICAgIH0sXG4gICAgICAgICdmdW5jLXNpbXBsZSc6IHtcbiAgICAgICAgICAgIGxpbmVCcmVha3M6IHRydWUsXG4gICAgICAgICAgICBtYXRjaDogLyxcXHMqW15cXHB7UGF0X1N5bn1cXHB7UGF0X1dTfV0rXFxzKi91LFxuICAgICAgICAgICAgdmFsdWU6IHNyYyA9PiBzcmMuc3Vic3RyaW5nKDEpLnRyaW0oKVxuICAgICAgICB9LFxuICAgICAgICBlbmQ6IHsgbWF0Y2g6ICd9JywgcG9wOiAxIH1cbiAgICB9LFxuICAgIHNlbGVjdDoge1xuICAgICAgICBvZmZzZXQ6IHtcbiAgICAgICAgICAgIGxpbmVCcmVha3M6IHRydWUsXG4gICAgICAgICAgICBtYXRjaDogL1xccypvZmZzZXRcXHMqOlxccypcXGQrXFxzKi91LFxuICAgICAgICAgICAgdmFsdWU6IHNyYyA9PiBzcmMuc3BsaXQoJzonKVsxXS50cmltKClcbiAgICAgICAgfSxcbiAgICAgICAgY2FzZToge1xuICAgICAgICAgICAgbGluZUJyZWFrczogdHJ1ZSxcbiAgICAgICAgICAgIG1hdGNoOiAvXFxzKig/Oj1cXGQrfFteXFxwe1BhdF9TeW59XFxwe1BhdF9XU31dKylcXHMqXFx7L3UsXG4gICAgICAgICAgICBwdXNoOiAnYm9keScsXG4gICAgICAgICAgICB2YWx1ZTogc3JjID0+IHNyYy5zdWJzdHJpbmcoMCwgc3JjLmluZGV4T2YoJ3snKSkudHJpbSgpXG4gICAgICAgIH0sXG4gICAgICAgIGVuZDogeyBtYXRjaDogL1xccypcXH0vdSwgcG9wOiAxIH1cbiAgICB9XG59O1xuZXhwb3J0cy5sZXhlciA9IG1vb18xLmRlZmF1bHQuc3RhdGVzKGV4cG9ydHMuc3RhdGVzKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@messageformat/parser/lib/lexer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@messageformat/parser/lib/parser.js":
/*!**********************************************************!*\
  !*** ./node_modules/@messageformat/parser/lib/parser.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * An AST parser for ICU MessageFormat strings\n *\n * @packageDocumentation\n * @example\n * ```\n * import { parse } from '@messageformat/parser\n *\n * parse('So {wow}.')\n * [ { type: 'content', value: 'So ' },\n *   { type: 'argument', arg: 'wow' },\n *   { type: 'content', value: '.' } ]\n *\n *\n * parse('Such { thing }. { count, selectordinal, one {First} two {Second}' +\n *       '                  few {Third} other {#th} } word.')\n * [ { type: 'content', value: 'Such ' },\n *   { type: 'argument', arg: 'thing' },\n *   { type: 'content', value: '. ' },\n *   { type: 'selectordinal',\n *     arg: 'count',\n *     cases: [\n *       { key: 'one', tokens: [ { type: 'content', value: 'First' } ] },\n *       { key: 'two', tokens: [ { type: 'content', value: 'Second' } ] },\n *       { key: 'few', tokens: [ { type: 'content', value: 'Third' } ] },\n *       { key: 'other',\n *         tokens: [ { type: 'octothorpe' }, { type: 'content', value: 'th' } ] }\n *     ] },\n *   { type: 'content', value: ' word.' } ]\n *\n *\n * parse('Many{type,select,plural{ numbers}selectordinal{ counting}' +\n *                          'select{ choices}other{ some {type}}}.')\n * [ { type: 'content', value: 'Many' },\n *   { type: 'select',\n *     arg: 'type',\n *     cases: [\n *       { key: 'plural', tokens: [ { type: 'content', value: 'numbers' } ] },\n *       { key: 'selectordinal', tokens: [ { type: 'content', value: 'counting' } ] },\n *       { key: 'select', tokens: [ { type: 'content', value: 'choices' } ] },\n *       { key: 'other',\n *         tokens: [ { type: 'content', value: 'some ' }, { type: 'argument', arg: 'type' } ] }\n *     ] },\n *   { type: 'content', value: '.' } ]\n *\n *\n * parse('{Such compliance')\n * // ParseError: invalid syntax at line 1 col 7:\n * //\n * //  {Such compliance\n * //        ^\n *\n *\n * const msg = '{words, plural, zero{No words} one{One word} other{# words}}'\n * parse(msg)\n * [ { type: 'plural',\n *     arg: 'words',\n *     cases: [\n *       { key: 'zero', tokens: [ { type: 'content', value: 'No words' } ] },\n *       { key: 'one', tokens: [ { type: 'content', value: 'One word' } ] },\n *       { key: 'other',\n *         tokens: [ { type: 'octothorpe' }, { type: 'content', value: ' words' } ] }\n *     ] } ]\n *\n *\n * parse(msg, { cardinal: [ 'one', 'other' ], ordinal: [ 'one', 'two', 'few', 'other' ] })\n * // ParseError: The plural case zero is not valid in this locale at line 1 col 17:\n * //\n * //   {words, plural, zero{\n * //                   ^\n * ```\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ParseError = void 0;\nexports.parse = parse;\nconst lexer_js_1 = __webpack_require__(/*! ./lexer.js */ \"(ssr)/./node_modules/@messageformat/parser/lib/lexer.js\");\nconst getContext = (lt) => ({\n    offset: lt.offset,\n    line: lt.line,\n    col: lt.col,\n    text: lt.text,\n    lineBreaks: lt.lineBreaks\n});\nconst isSelectType = (type) => type === 'plural' || type === 'select' || type === 'selectordinal';\nfunction strictArgStyleParam(lt, param) {\n    let value = '';\n    let text = '';\n    for (const p of param) {\n        const pText = p.ctx.text;\n        text += pText;\n        switch (p.type) {\n            case 'content':\n                value += p.value;\n                break;\n            case 'argument':\n            case 'function':\n            case 'octothorpe':\n                value += pText;\n                break;\n            default:\n                throw new ParseError(lt, `Unsupported part in strict mode function arg style: ${pText}`);\n        }\n    }\n    const c = {\n        type: 'content',\n        value: value.trim(),\n        ctx: Object.assign({}, param[0].ctx, { text })\n    };\n    return [c];\n}\nconst strictArgTypes = [\n    'number',\n    'date',\n    'time',\n    'spellout',\n    'ordinal',\n    'duration'\n];\nconst defaultPluralKeys = ['zero', 'one', 'two', 'few', 'many', 'other'];\n/**\n * Thrown by {@link parse} on error\n *\n * @public\n */\nclass ParseError extends Error {\n    /** @internal */\n    constructor(lt, msg) {\n        super(lexer_js_1.lexer.formatError(lt, msg));\n    }\n}\nexports.ParseError = ParseError;\nclass Parser {\n    constructor(src, opt) {\n        var _a, _b, _c, _d;\n        this.lexer = lexer_js_1.lexer.reset(src);\n        this.cardinalKeys = (_a = opt === null || opt === void 0 ? void 0 : opt.cardinal) !== null && _a !== void 0 ? _a : defaultPluralKeys;\n        this.ordinalKeys = (_b = opt === null || opt === void 0 ? void 0 : opt.ordinal) !== null && _b !== void 0 ? _b : defaultPluralKeys;\n        this.strict = (_c = opt === null || opt === void 0 ? void 0 : opt.strict) !== null && _c !== void 0 ? _c : false;\n        this.strictPluralKeys = (_d = opt === null || opt === void 0 ? void 0 : opt.strictPluralKeys) !== null && _d !== void 0 ? _d : true;\n    }\n    parse() {\n        return this.parseBody(false, true);\n    }\n    checkSelectKey(lt, type, key) {\n        if (key[0] === '=') {\n            if (type === 'select') {\n                throw new ParseError(lt, `The case ${key} is not valid with select`);\n            }\n        }\n        else if (type !== 'select') {\n            const keys = type === 'plural' ? this.cardinalKeys : this.ordinalKeys;\n            if (this.strictPluralKeys && keys.length > 0 && !keys.includes(key)) {\n                const msg = `The ${type} case ${key} is not valid in this locale`;\n                throw new ParseError(lt, msg);\n            }\n        }\n    }\n    parseSelect({ value: arg }, inPlural, ctx, type) {\n        const sel = { type, arg, cases: [], ctx };\n        if (type === 'plural' || type === 'selectordinal')\n            inPlural = true;\n        else if (this.strict)\n            inPlural = false;\n        for (const lt of this.lexer) {\n            switch (lt.type) {\n                case 'offset':\n                    if (type === 'select') {\n                        throw new ParseError(lt, 'Unexpected plural offset for select');\n                    }\n                    if (sel.cases.length > 0) {\n                        throw new ParseError(lt, 'Plural offset must be set before cases');\n                    }\n                    sel.pluralOffset = Number(lt.value);\n                    ctx.text += lt.text;\n                    ctx.lineBreaks += lt.lineBreaks;\n                    break;\n                case 'case': {\n                    this.checkSelectKey(lt, type, lt.value);\n                    sel.cases.push({\n                        key: lt.value,\n                        tokens: this.parseBody(inPlural),\n                        ctx: getContext(lt)\n                    });\n                    break;\n                }\n                case 'end':\n                    return sel;\n                /* istanbul ignore next: never happens */\n                default:\n                    throw new ParseError(lt, `Unexpected lexer token: ${lt.type}`);\n            }\n        }\n        throw new ParseError(null, 'Unexpected message end');\n    }\n    parseArgToken(lt, inPlural) {\n        const ctx = getContext(lt);\n        const argType = this.lexer.next();\n        if (!argType)\n            throw new ParseError(null, 'Unexpected message end');\n        ctx.text += argType.text;\n        ctx.lineBreaks += argType.lineBreaks;\n        if (this.strict &&\n            (argType.type === 'func-simple' || argType.type === 'func-args') &&\n            !strictArgTypes.includes(argType.value)) {\n            const msg = `Invalid strict mode function arg type: ${argType.value}`;\n            throw new ParseError(lt, msg);\n        }\n        switch (argType.type) {\n            case 'end':\n                return { type: 'argument', arg: lt.value, ctx };\n            case 'func-simple': {\n                const end = this.lexer.next();\n                if (!end)\n                    throw new ParseError(null, 'Unexpected message end');\n                /* istanbul ignore if: never happens */\n                if (end.type !== 'end') {\n                    throw new ParseError(end, `Unexpected lexer token: ${end.type}`);\n                }\n                ctx.text += end.text;\n                if (isSelectType(argType.value.toLowerCase())) {\n                    throw new ParseError(argType, `Invalid type identifier: ${argType.value}`);\n                }\n                return {\n                    type: 'function',\n                    arg: lt.value,\n                    key: argType.value,\n                    ctx\n                };\n            }\n            case 'func-args': {\n                if (isSelectType(argType.value.toLowerCase())) {\n                    const msg = `Invalid type identifier: ${argType.value}`;\n                    throw new ParseError(argType, msg);\n                }\n                let param = this.parseBody(this.strict ? false : inPlural);\n                if (this.strict && param.length > 0) {\n                    param = strictArgStyleParam(lt, param);\n                }\n                return {\n                    type: 'function',\n                    arg: lt.value,\n                    key: argType.value,\n                    param,\n                    ctx\n                };\n            }\n            case 'select':\n                /* istanbul ignore else: never happens */\n                if (isSelectType(argType.value)) {\n                    return this.parseSelect(lt, inPlural, ctx, argType.value);\n                }\n                else {\n                    throw new ParseError(argType, `Unexpected select type ${argType.value}`);\n                }\n            /* istanbul ignore next: never happens */\n            default:\n                throw new ParseError(argType, `Unexpected lexer token: ${argType.type}`);\n        }\n    }\n    parseBody(inPlural, atRoot) {\n        const tokens = [];\n        let content = null;\n        for (const lt of this.lexer) {\n            if (lt.type === 'argument') {\n                if (content)\n                    content = null;\n                tokens.push(this.parseArgToken(lt, inPlural));\n            }\n            else if (lt.type === 'octothorpe' && inPlural) {\n                if (content)\n                    content = null;\n                tokens.push({ type: 'octothorpe', ctx: getContext(lt) });\n            }\n            else if (lt.type === 'end' && !atRoot) {\n                return tokens;\n            }\n            else {\n                let value = lt.value;\n                if (!inPlural && lt.type === 'quoted' && value[0] === '#') {\n                    if (value.includes('{')) {\n                        const errMsg = `Unsupported escape pattern: ${value}`;\n                        throw new ParseError(lt, errMsg);\n                    }\n                    value = lt.text;\n                }\n                if (content) {\n                    content.value += value;\n                    content.ctx.text += lt.text;\n                    content.ctx.lineBreaks += lt.lineBreaks;\n                }\n                else {\n                    content = { type: 'content', value, ctx: getContext(lt) };\n                    tokens.push(content);\n                }\n            }\n        }\n        if (atRoot)\n            return tokens;\n        throw new ParseError(null, 'Unexpected message end');\n    }\n}\n/**\n * Parse an input string into an array of tokens\n *\n * @public\n * @remarks\n * The parser only supports the default `DOUBLE_OPTIONAL`\n * {@link http://www.icu-project.org/apiref/icu4c/messagepattern_8h.html#af6e0757e0eb81c980b01ee5d68a9978b | apostrophe mode}.\n */\nfunction parse(src, options = {}) {\n    const parser = new Parser(src, options);\n    return parser.parse();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@messageformat/parser/lib/parser.js\n");

/***/ })

};
;